devtools::document()
plotGCaMP_multi()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
plotGCaMP_multi()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
rlang::last_error()
rlang::last_trace()
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
#' plotGCaMP_multi
#'
#' Function is a wrapper for exp.fit.all.log.lin which outputs corrected GCaMP signals as well as plots showing
#' original and corrected signals. Also plots average trace for GCaMP signal. Inputs are matfiles with a "signal" field,
#' or .csv files from imageJ analysis.
#' The script searches recursively for matfiles (*.mat) or csv files (\*.csv) from a file (can be any placeholder file). Need to exclude
#' matfiles that are not GCaMP files either using FileFilter, or by putting only relevant files in the folder. Default
#' startpulse assumes 400ms delay for camera recording.
#' Requires max_delta helper function
#' time etc...
#' @param FileFilter string to search/subset filenames
#' @param matlab whether to use matfiles or data from ImageJ quantification. Defaults to FALSE (matfiles)
#' @param genotype label the genotype for these data
#' @param cue label the stimulus cue.
#' @param food label to food cue
#' @param startPulse begin of stimulus
#' @param endPulse endPulse time of stimulus
#' @param center_on_pulse optional parameter to center delF values by the mean of the stimulus duration
#' 'OFF' = Bring values to mean delF of 2nd half of pulse duration, order by OFF responses
#' 'ON' = Bring values to mean delF of 2nd half pre-pulse duration, order by ON responses
#' @param show.plots render plots for baseline correction - defaults to TRUE
#' @param use.Fmax normalize all amplitudes to within 0-1
#' @param neuron neuron being analyzed
#' @param linear optional argument piped into exp.fit.all.log.lin include a linear term in the fit?
#' @param heatmap_limits optional 3-value vector defining the color scale and y axis limits, ie c(-1,0,2)
#' @param folderpath user supplied path for recursive file search. If missing, it will prompt for a fiel selection.
#' @param backsub do you want to subtract background ie subtract ROI of background from the mean cell ROI? Defaults to TRUE
#' @param exp.fit do you want to use raw deltaF/F values - ie exponentially corrected? Defaults to TRUE, which means it will be corrected
#'
#' @importFrom magrittr "%>%"
#' @importFrom magrittr "%<>%"
#' @importFrom magrittr "%$%"
#' @export
#' @examples data <- plotGCaMP_multi(N2, genotype = N2, cue = octanol)
#'
plotGCaMP_multi <- function(FileFilter,
matlab = FALSE,
genotype = genotype,
cue = cue,
food = OP50,
startPulse = 29.5,
endPulse = 59.5,
center_on_pulse = "none",
show.plots = TRUE,
use.Fmax = FALSE,
neuron = GCAMP,
linear = FALSE,
nls = TRUE,
backsub = FALSE,
exp.fit = FALSE,
heatmap_limits = "auto",
folderPath,
...) {
message("this function is for analyzing calcium imaging data, for details,
go to https://github.com/SenguptaLab/Olfactory.Imaging")
library(tidyverse)
library(magrittr)
library(patchwork)
library(scales)
FileFilter <- quo_name(enquo(FileFilter)) # make Filter usable inside other functions
genotype <- quo_name(enquo(genotype))
cue <- quo_name(enquo(cue))
food <- quo_name(enquo(food))
neuron <- quo_name(enquo(neuron))
center_on_pulse <- quo_name(enquo(center_on_pulse))
#heatmap_limits <- enquo(heatmap_limits)
Check <- ArgumentCheck::newArgCheck()
if (genotype == "genotype")
ArgumentCheck::addError(
msg = "You left out the 'genotype' argument, was this intentional?",
argcheck = Check)
if (cue == "cue")
ArgumentCheck::addError(
msg = "You left out the 'cue' argument, was this intentional?",
argcheck = Check)
if (!center_on_pulse %in% c("none", "ON", "OFF")) {
ArgumentCheck::addError(
msg = "'center_on_pulse' must be either 'none', 'ON'or 'OFF'",
argcheck = Check
)
}
#* Return errors and warnings (if any)
ArgumentCheck::finishArgCheck(Check)
if(missing(folderPath)) {
folderPath <- dirname(file.choose())
}
message(paste("using files at or below the folder:", basename(folderPath)))
#### import, format and correct for photobleaching ####
if(matlab == TRUE) {
files <- list.files(file.path(folderPath), pattern = "*.mat", recursive = TRUE)
files <- files[stringr::str_detect(files, pattern = paste0(FileFilter))]
filenames <- files
files <- file.path(folderPath, files)
#df <- data.frame(x = 1, genotype = genotype, cue = cue)
data <- purrr::map(files, ~ exp.fit.all.log.lin(filename = .,
skip.time = 10,
show.plots = show.plots,
nls = nls,
startPulse = startPulse,
endPulse = ))
} else { #for matlab = FALSE
neuronfiles <- list.files(file.path(folderPath), pattern = "*neuron_results.csv", recursive = TRUE)
neuronfiles <- neuronfiles[stringr::str_detect(neuronfiles, pattern = paste0(FileFilter))]
neuronfilenames <- neuronfiles
neuronfiles <- file.path(folderPath, neuronfiles)
message("merging imageJ files")
purrr::map(
neuronfiles,
~ merge_FIJI_data(neuronfile = ., show.plots = show.plots, backsub = backsub))
files <- list.files(file.path(folderPath), pattern = "*ImageJ_data.csv", recursive = TRUE)
files <- files[stringr::str_detect(files, pattern = paste0(FileFilter))]
filenames <- files
files <- file.path(folderPath, files)
message("correcting photobleaching")
data <- purrr::map(files, ~ exp.fit.all.log.lin(
filename = .,
skip.time = 10,
show.plots = show.plots,
matlab = FALSE,
linear = linear,
nls = nls
))
}
devtools::build()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
plotGCaMP_multi(genotype = "N2", cue = "glycerol", nls = TRUE)
devtools::document()
devtools::build()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
plotGCaMP_multi(genotype = "N2", cue = "glycerol", nls = FALSE)
devtools::document()
devtools::build()
plotGCaMP_multi(genotype = "N2", cue = "glycerol", nls = FALSE)
library(try)
devtools::document()
devtools::build()
plotGCaMP_multi(genotype = "N2", cue = "glycerol", nls = FALSE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
devtools::build()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
plotGCaMP_multi(FileFilter = "", genotype = "N2", cue = "glycerol")
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
list.file("/Volumes/sengupta-lab/sengupta-lab/mikeod/OlfactoryScope/Providencia/glycerol/MOD_10_17_17")
list.files("/Volumes/sengupta-lab/sengupta-lab/mikeod/OlfactoryScope/Providencia/glycerol/MOD_10_17_17")
list.files("/Volumes/sengupta-lab/sengupta-lab/mikeod/OlfactoryScope/Providencia/glycerol/MOD_10_17_17", pattern = "*ImageJ_data.csv", recursive = TRUE)
files <- list.files("/Volumes/sengupta-lab/sengupta-lab/mikeod/OlfactoryScope/Providencia/glycerol/MOD_10_17_17", pattern = "*ImageJ_data.csv", recursive = TRUE)
files
files[stringr::str_detect(files, pattern = paste0(""))]
files[stringr::str_detect(files, pattern = paste0("FileFilter"))]
devtools::document()
files[stringr::str_detect(files, pattern = paste0("FileFilter"))]
rm(files)
plotGCaMP_multi(genotype = "N2", cue = "glycerol")
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = FALSE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = FALSE)
devtools::document()
devtools::document()
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = FALSE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = FALSE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
lib
lib(tidyverse)
library(Olfactory.Imaging)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
files
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
styler:::style_selection()
library(Olfactory.Imaging)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
library(Olfactory.Imaging)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
library(Olfactory.Imaging)
library(Olfactory.Imaging)
plotGCaMP_multi(genotype = "N2", cue = "glycerol", show.plots = TRUE)
library(Olfactory.Imaging)
usethis::use_namespace()
devtools::document()
usethis::use_namespace()
